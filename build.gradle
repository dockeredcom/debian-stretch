/*
*
*   Version 1.0.0
*
 */

ext.docker = [
  repository: "asynchrone",
  image: "debian-stretch",
  name: "stretch1"
]

initDirectories()

/*
*
*   Functions
*
 */

task clean() {
  group "Docker"
  description "Removes the image"

  doLast {
    def tag = "build"

    if (project.hasProperty("tag")) {
      tag = project.property("tag")
    }

    def count = countImages(tag)

    if (count > 0) {
      runCommand "docker rmi -f ${project.ext.docker.repository}/${project.ext.docker.image}:${tag}"
    }
  }
}

task cleanSystem() {
  group "Docker"
  description "Performs a system prune"

  doLast {
    runCommand "yes | docker system prune"
  }
}

task build {
  group "Docker"
  description "Builds the image"

  doLast {
    def tag = "build"

    if (project.hasProperty("tag")) {
      tag = project.property("tag")
    }

    runCommand "docker build -t ${project.ext.docker.repository}/${project.ext.docker.image}:${tag} " +\
               "-f ${rootDir}/src/docker/Dockerfile ${rootDir}/src/docker"
  }
}

task run {
  group "Docker"
  description "Runs a container based on the image"

  doLast {
    def tag = "build"

    if (project.hasProperty("tag")) {
      tag = project.property("tag")
    }

    runCommand "docker run --rm -t -d --name ${project.ext.docker.name} " + \
               "${project.ext.docker.repository}/${project.ext.docker.image}:${tag} /bin/bash"
  }
}

task stop {
  group "Docker"
  description "Stops the container"

  doLast {
    runCommand "docker container stop ${project.ext.docker.name}"
  }
}

def initDirectories() {
  def baseDirectories = ["src/docker", "src/resources"]
  def baseFiles = ["src/docker/Dockerfile", ".gitignore"]

  baseDirectories.each { baseDirName ->
    def baseDir = new File("${rootDir}/${baseDirName}")

    if (!baseDir.exists()) {
      baseDir.mkdirs()
    }
  }

  baseFiles.each { baseFileName ->
    def baseFile = new File("${rootDir}/${baseFileName}")

    if (!baseFile.exists()) {
      baseFile << " "
    }
  }
}

def countImages(String tag) {
  return getCommandResult("docker images ${project.ext.docker.repository}/${project.ext.docker.image}:${tag} \
                           --format '{{.ID}}' | wc -l").toInteger()
}

def containerExists(String name) {
  return getCommandResult("docker container ls -a --format '{{.Names}}' |" + \
                          " grep -w ${name} | wc -l").toInteger() > 0
}

def runCommand(String cmd) {
  def execCmd = ["/bin/bash", "-c"]
  execCmd += cmd

  project.exec {
    commandLine = execCmd
  }
}

def getCommandResult(String cmd) {
  def out = new ByteArrayOutputStream()
  def execCmd = ["/bin/bash", "-c"]
  execCmd += cmd

  project.exec {
    commandLine = execCmd
    standardOutput = out
  }

  return out.toString()
}
